#!/usr/bin/env bash

# Dependencies: Materials Icon font for the glyphs (ensure your Waybar font config includes it)

device="08:25:73:2E:45:77" # Replace with your device's MAC address

# Define colors (Waybar will handle colors via CSS, but we can define classes)
# grey_class="grey" # Not used directly in JSON output, but for clarity
green_class="connected"
yellow_class="paired"
default_class="disconnected"
off_class="off"

# Glyphs (ensure these render correctly in your Waybar font)
glyph_connected="  "
glyph_paired="  󰂯"
glyph_disconnected=" " # Or a different one if you prefer
glyph_off="⭘"

# --- Get Bluetooth Status ---
service_running=$(systemctl is-active "bluetooth.service")
# Ensure we don't proceed if the service isn't even running
if [[ ! $service_running ]]; then
    echo "{\"text\": \"$glyph_off\", \"tooltip\": \"Bluetooth Service Off\", \"class\": \"$off_class\"}"
    exit 0
fi

controller_on=$(bluetoothctl show | grep "Powered: yes")
device_paired=$(bluetoothctl devices Paired | grep "$device")
# Initialize device_connected and device_blocked to avoid errors if device not paired
device_connected=""
device_blocked=""

if [[ $device_paired ]]; then
    device_info=$(bluetoothctl info "$device")
    device_connected=$(echo "$device_info" | grep "Connected: yes")
    device_blocked=$(echo "$device_info" | grep "Blocked: yes")
fi

# --- status_json function ---
status_json() {
    local text=""
    local tooltip=""
    local class=""

    if [[ $service_running ]] && [[ $controller_on ]]; then
        if [[ $device_paired ]]; then
            if [[ $device_connected ]]; then
                text="$glyph_connected"
                tooltip="Device: $device\nStatus: Connected"
                class="$green_class"
            elif [[ ! $device_blocked ]]; then
                text="$glyph_paired"
                tooltip="Device: $device\nStatus: Paired, Disconnected"
                class="$yellow_class"
            else # Device is paired but blocked
                text="$glyph_disconnected"
                tooltip="Device: $device\nStatus: Paired, Blocked"
                class="$default_class"
            fi
        else # Device not paired, but controller is on
            text="$glyph_disconnected"
            tooltip="Controller On\nDevice: $device not paired"
            class="$default_class"
        fi
    elif [[ $service_running ]] && [[ ! $controller_on ]]; then # Service running, controller off
        text="$glyph_off"
        tooltip="Bluetooth Controller Off"
        class="$off_class"
    else # Service not running
        text="$glyph_off"
        tooltip="Bluetooth Service Off"
        class="$off_class"
    fi

    # Escape quotes for JSON
    tooltip=$(echo "$tooltip" | sed 's/"/\\"/g')
    echo "{\"text\": \"$text\", \"tooltip\": \"$tooltip\", \"class\": \"$class\"}"
}

# --- toggle_state function ---
toggle_state() {
    if [[ ! $service_running ]]; then
        # Try to start the service if it's not running
        systemctl start bluetooth.service
        sleep 1 # Give it a moment
        controller_on=$(bluetoothctl show | grep "Powered: yes")
        # Fall through to power on logic if service starts
    fi

    if [[ ! $controller_on ]]; then
        bluetoothctl power on
        sleep 0.5 # Give it a moment
        # If device was previously paired and blocked, unblock and connect
        if [[ $device_paired ]]; then
            bluetoothctl unblock "$device" && bluetoothctl connect "$device"
        fi
    elif [[ $device_connected ]]; then
        bluetoothctl disconnect "$device" && bluetoothctl block "$device"
    elif [[ $device_paired ]] && [[ ! $device_blocked ]]; then         # Paired but not connected, not blocked
        bluetoothctl connect "$device" || bluetoothctl block "$device" # Try connect, if fails, block
    elif [[ $device_paired ]] && [[ $device_blocked ]]; then           # Paired and blocked
        bluetoothctl unblock "$device" && bluetoothctl connect "$device"
    else # Controller on, but device not paired (or some other state)
        # This case might need more specific handling depending on desired behavior
        # For now, if device is known, try to connect (assuming it might have been unpaired manually)
        if [[ $device ]]; then
            bluetoothctl connect "$device"
        fi
    fi
}

# --- maybe_block function ---
maybe_block() {
    if [[ $controller_on ]] && [[ $device_paired ]] && [[ ! $device_connected ]] && [[ ! $device_blocked ]]; then
        bluetoothctl block "$device"
    fi
}

# --- Main case statement ---
case "$1" in
--toggle)
    toggle_state
    # Call status_json after toggle to reflect immediate change if possible,
    # though Waybar will call it again on its interval.
    # status_json
    ;;
--status)
    status_json
    ;;
--block-if-not-connected)
    maybe_block
    # status_json
    ;;
*)
    status_json # Default action is to output status
    ;;
esac
