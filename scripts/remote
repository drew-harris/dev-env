#!/bin/bash

# Usage: ./ssh-project [ssh_host]
# If ssh_host is not provided, it will read it from host.txt

# Determine SSH host
if [ $# -eq 0 ]; then
  if [ -f "host.txt" ]; then
    SSH_HOST=$(head -n 1 host.txt | tr -d '\r')
    if [ -z "$SSH_HOST" ]; then
      echo "host.txt is empty. Please provide an SSH host as an argument or populate host.txt."
      exit 1
    fi
    echo "Using SSH host from host.txt: $SSH_HOST"
  else
    echo "No SSH host provided and host.txt not found. Please provide an SSH host as an argument or create a host.txt file."
    exit 1
  fi
elif [ $# -eq 1 ]; then
  SSH_HOST="$1"
else
  echo "Usage: $0 [ssh_host]"
  exit 1
fi

# Find the git root directory or use the current directory
GIT_ROOT=$(git rev-parse --show-toplevel 2>/dev/null)
SOURCE_DIR=${GIT_ROOT:-$(pwd)}
PROJECT_NAME=$(basename "$SOURCE_DIR")

# Generate a unique key for this specific project/host combination
# This ensures each project has its own cached path
CACHE_KEY="REMOTE_PATH_${SSH_HOST}_${PROJECT_NAME}"
CACHE_KEY=$(echo "$CACHE_KEY" | tr '.-/' '_')  # Make the key shell-safe

# Use cached project path if available in environment for THIS project
if [ -n "${!CACHE_KEY}" ]; then
  DEST_PATH="${!CACHE_KEY}"
else
  # Determine the remote home directory for this specific project
  REMOTE_HOME=$(ssh -o ControlMaster=auto -o ControlPath=~/.ssh/control-%r@%h:%p -o ControlPersist=10m "$SSH_HOST" "bash -l -c 'pwd'")
  DEST_PATH="$REMOTE_HOME/$PROJECT_NAME"
  
  # Export the path to the environment for future use in THIS session only
  eval "export $CACHE_KEY=\"$DEST_PATH\""
  
  # We're not adding to .bashrc/.zshrc anymore to avoid cross-project contamination
fi

# SSH into the server and change to the project directory
echo "SSHing to $SSH_HOST and changing to $DEST_PATH"
ssh -t -o ControlMaster=auto -o ControlPath=~/.ssh/control-%r@%h:%p -o ControlPersist=10m "$SSH_HOST" "cd \"$DEST_PATH\" && bash -l"

